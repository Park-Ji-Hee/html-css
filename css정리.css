/* 모든 요소 선택 */
* {
  font-weight: bold;
  color: darkorange;
}

/* 같은 선택자의 경우 뒤에 오는 것이 우선순위 높음 */
* {
  color: plum;
}

/* 태그 선택자 */
p {
  color: olivedrab;
}

/* class 선택자 */
/* 태그보다 우선순위 높음 */
/* 페이지상의 여러 요소가 같은 class를 가질 수 있음 */
.blue {
  color: lightblue;
}

/* 다른 선택자에 이어붙일 수 있음(태그, 클래스 등...) */
/* 선택자는 구체적일수록 우선순위 높음 */
  p.blue {
    color: slateblue;
  }

  .blue.dark {
    color: mediumblue;
  }

  p.blue.dark {
    color: darkblue;
  }

/* id 선택자 */
/* class보다 우선순위 높음 */
/* id는 페이지상에서 요소마다 고유해야 함 */
  #red {
    color: tomato;
  }

/* 그룹 선택자 */
  span, .dark, #red {
    text-decoration: underline;
  }

-------------------------------
/* 자손 결합자 */
  .outer li {
    color: olivedrab;
  }

/* 자식(1촌 자손) 결합자 */
  .outer > li {
    color: dodgerblue;
  }

/* outer 자손 li들의 하위 li들 대상상 */
  .outer > li li {
    text-decoration: underline;
  }

/* 뒤따르는 모든 동생들 결합자, .starter 뒤에 있는 li부터터  */
  .starter ~ li {
    font-style: italic;
  }

/* 뒤따르는 바로 다음 동생 결합자, .starter 바로 뒤에 있는 li */
  .starter + li {
    font-weight: bold;
  }

/* 첫 번째, 마지막 요소 가상 클래스, ol의 li 첫번째부터, 마지막까지지 */
  ol li:first-child,
  ol li:last-child {
    color: yellowgreen;
  }

/* ~가 아닌 요소 가상 클래스, outer의 자식 li 중에서 last-child가 아닌요소  */
  .outer > li:not(:last-child) {
    text-decoration: line-through;
  }

  ul:not(.outer) li {
    font-weight: bold;
  }

/* ~번째 요소 가상 클래스, outer의 자식 li 중에서 3번째값 */
/* #, #n(n번째), #n+#(n번째에 숫자더한 수 만큼), odd(홀수), even(짝수) 등 시도해보기 */
  ol li:nth-child(3) {
    font-weight: bold;
    color: deeppink;
  }

/* 마우스오버 가상 클래스, li 중에 마우스 올려져 있는 애만 */
  li:hover {
    font-weight: bold;
    color: blue;
  }


-----------------------------------------------------------------------------------------------------------------------
 /* normal, italic, oblique */
  p {
    font-style: normal;

/* normal, bold, 100~900 */
    font-weight: normal;
  }

  div { font-size: 2em; }

/* none, underline, line-through,  underline line-through overline, ~~~~ */
  p {
    text-decoration: none;
    
/* capitalize, uppercase, lowercase // 영문자에 대해서만 한함함*/
    text-transform: none;
  }

  p {
    text-shadow: 5px 5px gray;
/* 글자의 오른쪽으로 5px, 아래쪽으로 5px 위치에 회색 그림자가 있습니다. */
  
    text-shadow: 5px 5px 4px rgb(0, 255, 0);
/* 글자의 오른쪽으로 5px, 아래쪽으로 5px 위치에, 4px 크기의 블러처리가 된 초록색 그림자가 있습니다. */
  
    text-shadow: 0px 0px 10px red;
/* 글자 바로 뒤에 blur-radius 값을 10px을 주어서, 글자 주위에 그림자가 번지도록 */
  }

---------------------------------------------------------------------------------------------------------------------
  p {
/* left, center, right, justify */
    text-align: left;

/* 한 글자 간의 간격 */
    letter-spacing: 0;
/* 단어 간의 간격 // em 추천 => 글자폰트마다 크기 다르기 때문에*/
    word-spacing: 0;
/* 줄 간격 */
    line-height: 1.5em;
  }


/* 들여쓰기 조절 */
  p { text-indent: 0.8em; }


/* list항목 앞에 디자인 바꿔줌 */
  ul {
    list-style: circle;
  }
  
/* li별로 지정하는 것도 가능 */
  ul > li:first-child {
    list-style: "🚩 "
  }
/* list항목을 그림으로 디자인 넣을 수 있음음 */ 
  ol {
    list-style: url(절대주소사이트);
  }

-------------------------------------------------------------------------------------------------
-- 색의 조합
keyword : 색상마다 부여된 이름
  red
RGB(A)  : 빨강, 초록, 파랑의 광원으로 색을 혼합하는 방식, 끝에 알파값을 붙여서 투명도를 조절
  rgba(255, 140, 0, 0.1)
HEX     : R, G, B, Alpha 값들을 16진수형태로 나타낸 것
  #000
HSL(A)  : 색상, 채도, 명도값 그리고 알파값을 조합하여 색을 나타냄
  hsl(0, 100%, 100%)

    p {
/* 글자색 */
      color: yellow;
    
/* 배경색 */
      background-color: #333;
    }

-------------------------------------------------------------------------------------------------

                              inline	                              block	                inline-block
기본 너비	                   컨텐츠만큼                          	부모의 너비만큼	          컨텐츠만큼
width, height 속성  	       무시	                                적용	                   적용
가로공간 차지       	        공유	                               독점	                    공유
margin 속성 ( 바깥쪽 여백 ) 	가로만 적용	모두 적용 ( 상하 상쇄 )	   모두                     적용
padding 속성 ( 안쪽 여백 )  	가로만 적용, 세로는 배경색만	        모두                      적용	모두 적용

==> block 은 가로 길이 독점
==> block, inline-blonck은 width,height,margin,padding 모두 적용됨
==> inline은 해당 컨텐츠만 담음
** 목록창에서 해당 컨텐츠를 정확히 누르게 할 때는 inline  // 근처만 가도 클릭이 가능하게 할 때는 inline-block <== 컨텐츠들이 일직선 상에 있다고 할 때때







