/* 모든 요소 선택 */
* {
  font-weight: bold;
  color: darkorange;
}

/* 같은 선택자의 경우 뒤에 오는 것이 우선순위 높음 */
* {
  color: plum;
}

/* 태그 선택자 */
p {
  color: olivedrab;
}

/* class 선택자 */
/* 태그보다 우선순위 높음 */
/* 페이지상의 여러 요소가 같은 class를 가질 수 있음 */
.blue {
  color: lightblue;
}

/* 다른 선택자에 이어붙일 수 있음(태그, 클래스 등...) */
/* 선택자는 구체적일수록 우선순위 높음 */
  p.blue {
    color: slateblue;
  }

  .blue.dark {
    color: mediumblue;
  }

  p.blue.dark {
    color: darkblue;
  }

/* id 선택자 */
/* class보다 우선순위 높음 */
/* id는 페이지상에서 요소마다 고유해야 함 */
  #red {
    color: tomato;
  }

/* 그룹 선택자 */
  span, .dark, #red {
    text-decoration: underline;
  }

-------------------------------
/* 자손 결합자 */
  .outer li {
    color: olivedrab;
  }

/* 자식(1촌 자손) 결합자 */
  .outer > li {
    color: dodgerblue;
  }

/* outer 자손 li들의 하위 li들 대상상 */
  .outer > li li {
    text-decoration: underline;
  }

/* 뒤따르는 모든 동생들 결합자, .starter 뒤에 있는 li부터터  */
  .starter ~ li {
    font-style: italic;
  }

/* 뒤따르는 바로 다음 동생 결합자, .starter 바로 뒤에 있는 li */
  .starter + li {
    font-weight: bold;
  }

/* 첫 번째, 마지막 요소 가상 클래스, ol의 li 첫번째부터, 마지막까지지 */
  ol li:first-child,
  ol li:last-child {
    color: yellowgreen;
  }

/* ~가 아닌 요소 가상 클래스, outer의 자식 li 중에서 last-child가 아닌요소  */
  .outer > li:not(:last-child) {
    text-decoration: line-through;
  }

  ul:not(.outer) li {
    font-weight: bold;
  }

/* ~번째 요소 가상 클래스, outer의 자식 li 중에서 3번째값 */
/* #, #n(n번째), #n+#(n번째에 숫자더한 수 만큼), odd(홀수), even(짝수) 등 시도해보기 */
  ol li:nth-child(3) {
    font-weight: bold;
    color: deeppink;
  }

/* 마우스오버 가상 클래스, li 중에 마우스 올려져 있는 애만 */
  li:hover {
    font-weight: bold;
    color: blue;
  }


-----------------------------------------------------------------------------------------------------------------------

 /* normal, italic, oblique */
  p {
    font-style: normal;

/* normal, bold, 100~900 */
    font-weight: normal;
  }

  div { font-size: 2em; }

/* none, underline, line-through,  underline line-through overline, ~~~~ */
  p {
    text-decoration: none;
    
/* capitalize, uppercase, lowercase // 영문자에 대해서만 한함함*/
    text-transform: none;
  }

  p {
    text-shadow: 5px 5px gray;
/* 글자의 오른쪽으로 5px, 아래쪽으로 5px 위치에 회색 그림자가 있습니다. */
  
    text-shadow: 5px 5px 4px rgb(0, 255, 0);
/* 글자의 오른쪽으로 5px, 아래쪽으로 5px 위치에, 4px 크기의 블러처리가 된 초록색 그림자가 있습니다. */
  
    text-shadow: 0px 0px 10px red;
/* 글자 바로 뒤에 blur-radius 값을 10px을 주어서, 글자 주위에 그림자가 번지도록 */
  }

---------------------------------------------------------------------------------------------------------------------
  p {
/* left, center, right, justify */
    text-align: left;

/* 한 글자 간의 간격 */
    letter-spacing: 0;
/* 단어 간의 간격 // em 추천 => 글자폰트마다 크기 다르기 때문에*/
    word-spacing: 0;
/* 줄 간격 */
    line-height: 1.5em;
  }


/* 들여쓰기 조절 */
  p { text-indent: 0.8em; }


/* list항목 앞에 디자인 바꿔줌 */
  ul {
    list-style: circle;
  }
  
/* li별로 지정하는 것도 가능 */
  ul > li:first-child {
    list-style: "🚩 "
  }
/* list항목을 그림으로 디자인 넣을 수 있음음 */ 
  ol {
    list-style: url(절대주소사이트);
  }

-------------------------------------------------------------------------------------------------
-- 색의 조합
keyword : 색상마다 부여된 이름
  red
RGB(A)  : 빨강, 초록, 파랑의 광원으로 색을 혼합하는 방식, 끝에 알파값을 붙여서 투명도를 조절
  rgba(255, 140, 0, 0.1)
HEX     : R, G, B, Alpha 값들을 16진수형태로 나타낸 것
  #000
HSL(A)  : 색상, 채도, 명도값 그리고 알파값을 조합하여 색을 나타냄
  hsl(0, 100%, 100%)

    p {
/* 글자색 */
      color: yellow;
    
/* 배경색 */
      background-color: #333;
    }

-------------------------------------------------------------------------------------------------

                              inline	                              block	                inline-block
기본 너비	                   컨텐츠만큼                          	부모의 너비만큼	          컨텐츠만큼
width, height 속성  	       무시	                                적용	                   적용
가로공간 차지       	        공유	                               독점	                    공유
margin 속성 ( 바깥쪽 여백 ) 	가로만 적용	모두 적용 ( 상하 상쇄 )	   모두                     적용
padding 속성 ( 안쪽 여백 )  	가로만 적용, 세로는 배경색만	        모두                      적용	모두 적용

==> block 은 가로 길이 독점
==> block, inline-blonck은 width,height,margin,padding 모두 적용됨
==> inline은 해당 컨텐츠만 담음
** 목록창에서 해당 컨텐츠를 정확히 누르게 할 때는 inline  // 근처만 가도 클릭이 가능하게 할 때는 inline-block <== 컨텐츠들이 일직선 상에 있다고 할 때때

-----------------------------------------------------------------

vw                : 윈도우창 전체대비 가로너비
vh                : 윈도우창 전체대비 세로높이
vmax              : 윈도우창 높이-너비 중 더 큰 것 기준으로 백분율
vmin              : 윈도우창 높이-너비 중 작은 것 기준으로 백분율
calc(50% + 100px) : 50%인 것보다 100px 더 높이

margin            : block 요소일 때, 2개 사이의 margin은 더 큰 요소 적용됨(2개의 margin모두 적용되지 않음)
margin: auto;     : block 요소일 때, 가로방향의 중간(부모요소의 중앙)으로 옮 // 나머지 칸을 꽉 채운다고 생각하면됨
                    inline-block일 떄 ==> body{text-align:center;}
+) pading, margin 한 방향에만 적용 가능
    /* margin-top: */
    /* margin-bottom: */
    /* margin-left: */
    /* margin-right: */

    /* padding-top */
    /* padding-bottom */
    /* padding-left */
    /* padding-right */

-----------------------------------------------------------------

box-sizing: content-box;    : 박스 안 글자 영역만 width에 포함됨
box-sizing: border-box;     : padding, border 영역까지 width에 포함됨

border-radius               : 테두리 둥글게 하는 정도
  /* border-top
  border-bottom
  border-left
  border-right */

overflow                    : 너무 커서 영역을 벗어나는 콘텐츠를 제어하는 수단
  /* overflow: visible;     : 패딩상자 밖으로 넘친 부분을 보여줌
     overflow: hidden;      : 패딩상자 밖으로 넘친 부분이 잘립 (잘린부분 안보임)
     overflow: scroll;      : 패딩상자 밖으로 넘친 부분이 잘립 + 스크롤 생김(확인 가능)
     overflow: auto;        : 콘텐츠들이 넘치면 자동으로 스크롤이 생김
     overflow-x:            : 가로만 적용
     overflow-y:            : 세로만 적용
  */

box-shadow: 
  box-shadow: inset 여부 |offset-x | offset-y | blur-radius | spread-radius | color;
  /* box-shadow: inset 4px 4px 4px -4px gray;  
    : 안쪽으로그림자가 향하게(왼쪽상향방향) , 가로 4px, 세로 4px, 4px 흐리고, 4px만큼 도형보다 작은, 그레이 색깔 그림자 */

---------------------------------------------------------------------
/* https://webstoryboy.co.kr/1816  <== 참고할 블로그 */
background-image: url(이미지주소);    : 배경에 이미지 넣기
background-position: ;               : 배경 이미지 위치, top==위에서 순서대로 보이기, 50% 50% == center
background-repaeat: ;                : 배경 이미지 반복 여부
  /* background-repeat : repeat | repeat-x | repeat-y | no-repeat | space | round */
background-size: ;                   : 배경 이미지 사이즈를 설정

    /* .outer {
      width: 200px;
      height: 200px;
      background-color: #eee;
      border-radius: 20%;
      overflow: hidden;
    }
    .with-bg {
      height: 100%;
      background-image: url(https://showcases.yalco.kr/html-css/02-08/images/mona-lisa.jpg);
      background-size: cover;
      border-radius: 50%;
      background-position: center;
    } */


background 그라데이션
  background : linear-gradient (direction|angle, color-stop1, color-stop2, ... );
  ** ndeg==n도의방향 ==> 45deg = to right top // 90deg = to right
    /* .background_color {
      width: 200px; height: 200px;
      background: 
        linear-gradient(gold, tomato),          : 위에서 아래 방향, 골드에서 토마토색으로
        linear-gradient(90deg, gold, tomato),       : 왼->오 방향, 골드에서 토마토색으로
        linear-gradient(to right, gold, 75%, tomato);  : 왼->오 방향, 골드75%만큼, 골드에서 토마토색으로 
      } */

---------------------------------------------------------------------

postion
static
 - 기본값, 전적으로 페이지의 흐름을 따름
 - top, bottom, left, right, z-index 속성의 영향을 받지 않음


relative
 - 상대적 위치 // 바로 위 static의 값에 따른 상대적 위치

 - 값은 원래 위치를 기준으로 top~right 속성값이 적용되도록 함
 - 요소의 위치는 이동하지만 요소가 차지하는 공백의 위치는 유지됨


absolute
 - 부모 중에 position이 relative, fixed, absolute 하나라도 있으면 그 부모를 기준으로 절대적으로 움직임
 - 일반적으로 absolute를 쓸 경우, 기준이 될 부모에게 position: relative; 를 부여

 - 값은 static이 아닌 첫 부모 요소를 기준
 - top~right을 사용하여 위치를 조정할 수 있슴
 - 요소는 페이지의 문서 흐름에서 벗어나, 자리를 차지하지 않게 됨
 - (위의 바깥쪽 div는 포지션이 relative로 되어 있습니다.)


fixed
 - viewport(window 기준)를 기준으로 배치 // 스크롤 내려도 같은위치에 따라오는 광고 같은 것들

 - 스크롤에 영향을 받지 않으므로, 다이얼로그 팝업처럼 움직이지 않는 요소들에 유용하게 사용될 수 있슴


sticky
 - 원래자리에 있다가 스크롤에 따라 지정된 위치에 배치 // 영화관 사이트 상단 목록 같은 경우

 - 요소가 스크롤로 이동할 수 있는 공간을 top~right 속성으로 제한할 수 있슴


+) z-index
 - static이 아닌 요소들간 위아래 배치 순서를 지정
 - auto는 0과 같음  ==> z-index 숫자가 클수록 가장 위에 배치됨
 - 같은 값의 요소들 중에는 나중에 배치된 것이 위로 올라오게 됨

---------------------------------------------------------------------
cursor 속성
  cursor: ; : auto, none, pointer, not-allowed, default, zoom-in

요소를 숨기는 3가지 방법
  opacity
    - 속성을 0으로 하면 모습 감춤 == 커서 적용가능 + 부피 차지함
    - 스크린 리더에게 읽힘

  visibility
    - hidden으로 하면  == 마우스 오버 효과나 포커스, 클릭 등도 무효하게 됨
    - 스크린 리더에게도 읽히지 않게 됨

  display
    - none으로 하면 == oppacity=0 + visibility=hidden + 부피차지 안함 

---------------------------------------------------------------------

flexbox
*** height: 100vh;   : vh(viewport heigh) 사용 중인 화면(뷰포트)의 전체 높이를 기준으로 비율
            100vh    -> 요소가 화면 높이 전체를 차지하도록 만듬 / 전체 높이(100%)와 동일 / 창의 높이에 따라 동적으로 크기가 조정

    : https://studiomeal.com/archives/197
    display: flex;                 : 해당 부분 안에 아이템만 다닥 붙음
    display: flex-box;             : 해당 부분 전체 범위가 같이 flex하게 움직임

    gap: 1rem;                     : 해당 부분 안에 아이템 간의 간격

    inline-flex;                   : 
    inline-flexbox;                : 

    order : ;                      :  display:flex; 설정 후 oreder값으로 위치변경 // 기본값은 0임 

    flex-direction : ;             :  flex 방향을 세로/가로 중에 선택
      row;                          - 요소들을 텍스트의 방향과 동일하게 정렬합니다.
      row-reverse;                  - 요소들을 텍스트의 반대 방향으로 정렬합니다.
      column;                       - 요소들을 위에서 아래로 정렬합니다.
      column-reverse;               - 요소들을 아래에서 위로 정렬합니다.

    flex-basis : 10px;             : 설정한 axis 방향에 따라 10px만큼 간격을 둔다
      영향력 : flex-basis < width < max-width, min-width
    flex-grow: ;                   : Flex Container에 공간이 남을 경우 Flex Item의 flex-basis 크기가 얼마나 더 할당 가능한지 나타내는 속성
    flex-shrink: ;                 : Flex Container에 공간이 부족해질 때 Flex Item의 axis 방향 크기가 얼마나 줄어들 수 있는지 지정하는 값
    flex: 1 1 0;                   : grow shrink basis 순서

    justify-content : ;            : 메인축을 따라 정렬
      flex-start;                   - 요소들을 컨테이너의 왼쪽으로 정렬
      flex-end;                     - 요소들을 컨테이너의 오른쪽으로 정렬
      center;                       - 요소들을 컨테이너의 가운데로 정렬
      space-between;                - 요소들 사이에 동일한 간격 둠
      space-around;                  - 요소들 주위에 동일한 간격 둠

    align-items : ;                : 메인축의 수직축를 따라 정렬
      flex-start;                   - 요소들을 컨테이너의 꼭대기로 정렬
      flex-end;                     - 요소들을 컨테이너의 바닥으로 정렬
      center;                       - 요소들을 컨테이너의 세로선 상의 가운데로 정렬
      baseline;                     - 요소들을 컨테이너의 시작 위치에 정렬
      stretch;                      - 요소들을 컨테이너에 맞도록 늘림

    align-self : ;                 : 개별 요소에 적용할 수 있는 또 다른 속성

    align-content : ;              : 여러 줄들 사이의 간격
      flex-start;                   - 여러 줄들을 컨테이너의 꼭대기에 정렬
      flex-end;                     - 여러 줄들을 컨테이너의 바닥에 정렬
      center;                       - 여러 줄들을 세로선 상의 가운데에 정렬
      space-between;                - 여러 줄들 사이에 동일한 간격 둠
      space-around;                 - 여러 줄들 주위에 동일한 간격 둠
      stretch;                      - 여러 줄들을 컨테이너에 맞도록 늘림

    flex-wrap : ;                  : 정렬 정
      nowrap;                       - 모든 요소들을 한 줄에 정렬
      wrap;                         - 요소들을 여러 줄에 걸쳐 정렬
      wrap-reverse;                 - 요소들을 여러 줄에 걸쳐 반대로 정렬 ********
    flex-flow : ;                  : flex-direction + flex-wrap ==> flex-flow: row wrap

---------------------------------------------------------------------




---------------------------------------------------------------------


